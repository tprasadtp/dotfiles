direnv_base_dir() {
  echo "${direnv_layout_dir:-$PWD}"
}

# Usage: layout python <python_exe>
#
# Creates and loads a virtual environment under
# "$direnv_layout_dir/python-$python_version".
# This forces the installation of any egg into the project's sub-folder.
# For python older then 3.3 this requires virtualenv to be installed.
#
# It's possible to specify the python executable if you want to use different
# versions of python.
#
layout_virtualenv() {
  local old_env
  local python=${1:-python3}
  [[ $# -gt 0 ]] && shift
  old_env=$(direnv_base_dir)/.venv
  unset PYTHONHOME
  if [[ -d $old_env && $python == python ]]; then
    VIRTUAL_ENV=$old_env
  else
    local python_version
    # shellcheck disable=SC2046
    read -r python_version <<<$($python -c "import platform as p; print(p.python_version())")
    if [[ -z $python_version ]]; then
      log_error "Could not find python's version"
      return 1
    fi

    VIRTUAL_ENV=$(direnv_base_dir)/.venv
    if [[ ! -d $VIRTUAL_ENV ]]; then
       $python -m virtualenv "$@" "$VIRTUAL_ENV"
    fi
  fi
  export VIRTUAL_ENV
  PATH_add "$VIRTUAL_ENV/bin"
}


# Poetry
layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  local VENV=$( poetry show -v|grep "Using virtualenv:"|cut -f 3 -d " " 2>/dev/null)
  export VIRTUAL_ENV=$VENV
  export POETRY_ACTIVE=1
  PATH_add "$VIRTUAL_ENV/bin"
}
