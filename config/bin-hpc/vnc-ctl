#!/usr/bin/env bash
# Copyright (c) 2021. Prasad Tengse
#
# shellcheck disable=SC2155,SC2034

set -o pipefail

# Script Constants
readonly CURDIR="$(cd -P -- "$(dirname -- "")" && pwd -P)"
readonly SCRIPT="$(basename "$0")"
# Default log level (debug logs are disabled)
LOG_LVL=0

# Handle Signals
# trap ctrl-c and SIGTERM
trap ctrl_c_signal_handler INT
trap term_signal_handler SIGTERM

function ctrl_c_signal_handler() {
  log_error "User Interrupt! CTRL-C"
  exit 4
}
function term_signal_handler() {
  log_error "Signal Interrupt! SIGTERM"
  exit 4
}

#>> diana::snippet:bash-logger:begin <<#
# shellcheck shell=sh
# shellcheck disable=SC3043

# SHELL LOGGING LIBRARY
# See https://github.com/tprasadtp/dotfiles/libs/logger/README.md
# If included in other files, contents between snippet markers is
# automatically updated and all changes between markers wil be ignored.

# Logger core
__logger_core_event_handler()
{
  [ "$#" -lt 2 ] && return

  # Caller is same as level name
  local lvl_caller="${1:-info}"

  case $lvl_caller in
    log_trace | trace)
      lvl_caller="trace"
      level="0"
      ;;
    log_debug | debug)
      lvl_caller="debug"
      level="10"
      ;;
    log_info | info)
      lvl_caller="info"
      level="20"
      ;;
    log_success | success | ok)
      lvl_caller="success"
      level="20"
      ;;
    log_warning | warning | warn)
      lvl_caller="warning"
      level="30"
      ;;
    log_notice | notice)
      lvl_caller="notice"
      level="35"
      ;;
    log_error | error)
      lvl_caller="error"
      level="40"
      ;;
    *)
      level="40"
      ;;
  esac

  # Immediately return if log level is not enabled
  # If LOG_LVL is not set, defaults to 20 - info level
  [ "${LOG_LVL:-20}" -gt "$level" ] && return

  shift
  local lvl_msg="$*"

  # Detect whether to coloring is disabled based on env variables,
  # and if output Terminal is intractive. This supports both
  # - https://bixense.com/clicolors/ &
  # - https://no-color.org/ standards.

  # Forces colored logs
  # - if CLICOLOR_FORCE is set and non empty and not zero
  #
  if [ -n "${CLICOLOR_FORCE}" ] && [ "${CLICOLOR_FORCE}" != "0" ]; then
    local lvl_colorized="true"
    # shellcheck disable=SC2155
    local lvl_color_reset="$(printf '\e[0m')"

  # Disable colors if one of the conditions are true
  # - CLICOLOR = 0
  # - NO_COLOR is set to non empty value
  # - TERM is set to dumb
  elif [ -n "$NO_COLOR" ] || [ "$CLICOLOR" = "0" ] || [ "$TERM" = "dumb" ]; then
    local lvl_colorized="false"
    local lvl_color=""
    local lvl_color_reset=""

  # Enable colors if not already disabled or forced and terminal is interactive
  elif [ -t 1 ]; then
    local lvl_colorized="true"
    # shellcheck disable=SC2155
    local lvl_color_reset="$(printf '\e[0m')"

  # Default=disable colors
  else
    local lvl_colorized="false"
    local lvl_color=""
    local lvl_color_reset=""
  fi

  # Log and Date formatter
  if [ "${LOG_FMT:-pretty}" = "pretty" ] && [ "$lvl_colorized" = "true" ]; then
    local lvl_string="â€¢"
  elif [ "${LOG_FMT}" = "full" ] || [ "${LOG_FMT}" = "long" ]; then
    local lvl_prefix="name+ts"
    # shellcheck disable=SC2155
    local lvl_ts="$(date --rfc-3339=s)"
  else
    local lvl_prefix="name"
  fi

  # Define level, color and timestamp
  # By default we do not show log level and timestamp.
  # However, if LOG_FMT is set to "full" or "long" or if colors are disabled,
  # we will enable long format with timestamps
  case "$lvl_caller" in
    trace)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[TRACE ]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [TRACE ]"
      # shellcheck disable=SC2155
      [ "$lvl_colorized" = "true" ] && local lvl_color="$(printf '\e[38;5;246m')"
      ;;
    debug)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[DEBUG ]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [DEBUG ]"
      # shellcheck disable=SC2155
      [ "$lvl_colorized" = "true" ] && local lvl_color="$(printf '\e[38;5;250m')"
      ;;
    info)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[INFO  ]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [INFO  ]"
      # Avoid printing color reset sequence as this level is not colored
      [ "$lvl_colorized" = "true" ] && lvl_color_reset=""
      ;;
    success)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[OK    ]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [OK    ]"
      # shellcheck disable=SC2155
      [ "$lvl_colorized" = "true" ] && local lvl_color="$(printf '\e[38;5;83m')"
      ;;
    warning)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[WARN  ]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [WARN  ]"
      # shellcheck disable=SC2155
      [ "$lvl_colorized" = "true" ] && local lvl_color="$(printf '\e[38;5;214m')"
      ;;
    notice)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[NOTICE]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [NOTICE]"
      # shellcheck disable=SC2155
      [ "$lvl_colorized" = "true" ] && local lvl_color="$(printf '\e[38;5;81m')"
      ;;
    error)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[ERROR ]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [ERROR ]"
      # shellcheck disable=SC2155
      [ "$lvl_colorized" = "true" ] && local lvl_color="$(printf '\e[38;5;197m')"
      ;;
    *)
      [ "$lvl_prefix" = "name" ] && local lvl_string="[UNKOWN]"
      [ "$lvl_prefix" = "name+ts" ] && local lvl_string="$lvl_ts [UNKNOWN]"
      # Avoid printing color reset sequence as this level is not colored
      [ "$lvl_colorized" = "true" ] && lvl_color_reset=""
      ;;
  esac

  if [ "${LOG_TO_STDERR:-false}" = "true" ]; then
    printf "%s%s %s %s\n" "$lvl_color" "${lvl_string}" "$lvl_msg" "${lvl_color_reset}" 1>&2
  else
    printf "%s%s %s %s\n" "$lvl_color" "${lvl_string}" "$lvl_msg" "${lvl_color_reset}"
  fi
}

# Leveled Loggers
log_trace()
{
  __logger_core_event_handler "trace" "$@"
}

log_debug()
{
  __logger_core_event_handler "debug" "$@"
}

log_info()
{
  __logger_core_event_handler "info" "$@"
}

log_success()
{
  __logger_core_event_handler "ok" "$@"
}

log_warning()
{
  __logger_core_event_handler "warn" "$@"
}

log_warn()
{
  __logger_core_event_handler "warn" "$@"
}

log_notice()
{
  __logger_core_event_handler "notice" "$@"
}

log_error()
{
  __logger_core_event_handler "error" "$@"
}
#>> diana::snippet:bash-logger:end <<#

# Checks if command is available
function has_command() {
  if command -v "$1" >/dev/null; then
    return 0
  else
    return 1
  fi
  return 1
}



function run_vnc()
{
  # Because modules sometimes do not load variables into shell
  load_modules

  if [[ -d $HOME/.vnc ]]; then
    log_debug ".vnc directory exists!"
  else
    log_info "Creating ~/.vnc"
    if mkdir -p "$HOME/.vnc"; then
      log_success "OK"
    else
      log_error "Failed to create logs and config folder ~/.vnc"
      exit 1
    fi
  fi

  if has_command vncserver; then

    # Use better res, auto kill and start xfce scession properly
    if [[ $disable_autokill == "true" ]]; then
      AUTOKILL=""
    else
      AUTOKILL="-autokill"
    fi

    if [[ $enable_vgl == "true" ]]; then
      TVNC_VGL=1
    else
      TVNC_VGL=0
    fi
    log_info "Starting new VNC sesion"
    TVNC_VGL="${TVNC_VGL}" "${TURBOVNC_DIR}/bin/vncserver" \
      "${AUTOKILL}" \
      -geometry "${WM_RESOLUTION}" \
      -fp "${HOME}/.local/share/fonts" \
      -log "${HOME}/.vnc/vncserver.log" \
      -wm "startxfce4" &> /dev/null
    exit_code="$?"
    if [[ $exit_code -ne 0 ]]; then
      log_error "something went wrong while running vnc server."
      exit "${exit_code}"
    else
      log_success "Successfully started VNC server."
      log_success "To see how to connect to it run the script with --info"
    fi
  else
    log_error "Cannot find vncserver command! Allow the script to load modules!"
    exit 1
  fi
}

function load_modules()
{
  if [[ $load_required_modeule == "false" ]]; then
    log_warning "Skipped loading Modules!!"
  else
    log_info "Loading Latest VNC module"
    # Cant avoid eval here
    eval module load tools/turbovnc/latest &> /dev/null
  fi
}

function vnc_kill()
{
  local displays

  load_modules
  #shellcheck disable=SC2009
  displays="$(ps -ef | grep "$USER" | grep '[X]vnc' | awk '{print $9}' | tr -d :)"

  if [ -n "$displays" ]; then
    #shellcheck disable=SC2116
    for d in $(echo "$displays"); do
      log_debug "Stopping vnc server on display:$d"
      read -rp "Do you want to stop vncserver :${d} (y/N) " yesno
      #Needed because bash on nemo is too old
      #shellcheck disable=SC2019,SC2018
      ans=$(echo "${yesno}" | tr "A-Z" "a-z")
      if [[ ${ans} == "y" ]];then
        "${TURBOVNC_DIR}"/bin/vncserver -kill ":${d}"
      fi
    done
  else
    log_error "No running servers were detected!"
  fi
}


function display_info()
{
  node_name=$(hostname)
  connection_count="$(pgrep -a -u "$USER" [X]vnc | awk '{print $3}' | tr -d : | wc -l)"
  if [[ connection_count -gt 0 ]];then
    log_success "There are ${connection_count} active sessions"

    # for file in ${HOME}/.vnc/${node_name}\:*.pid; do
    while read -p -r line; do
      port=$((5900+line))
      vnc_ports+=("$port")
    done < <(pgrep -a -u "$USER" [X]vnc | awk '{print $3}' | tr -d : )

    echo ""
    echo "Linux"
    echo "--------------------"
    for p in "${vnc_ports[@]}"; do
      echo "* ssh -fCNL ${p}:${node_name}:${p} ${USER}@login.nemo.uni-freiburg.de"
    done
    echo ""
    echo "Windows PuTTY"
    echo "--------------------"
    echo "Start another Putty session and navigate to Connection -> SSH -> Tunnels"
    for p in "${vnc_ports[@]}"; do
      echo "* Source Port: ${p} Destination: ${node_name}:${p}"
    done

    echo ""
    echo "VNC Viewer Address(s)"
    echo "-------------------------"
    for p in "${vnc_ports[@]}"; do
      echo "* localhost:${p}"
    done
    echo ""
    echo "Tips"
    echo "-----------"
    echo "These addresses are only active after you complete Linux/Windows specific steps/commands above."
    echo "To kill the sessions, "
    echo "  * logout (if you did not disable autokill)"
    echo "  * use vnc-session --kill command."
  else
    log_error "There are no active VNC sessions on this node!"
  fi
}

function display_usage()
{
#Prints out help menu
cat <<EOF
Handy utility to run VNC server.

Usage: ${GREEN}${SCRIPT} ${BLUE}  [options]${NC}
---------------------------------------------
[-r --resolution]        Geometry Params (default=1920x1080)
[-i --info]              Display connection info]
[-k --kill]              Kill all running VNC sessions
[-a --disable-autokill]  Disables passing -autokill to vnc module.
                          This has a side effect of not killing the
                          server, even when you click logout.
                          Use with caution.
[-m --skip-load]         Skip Loading modules
[-v --enable-vgl]        Enables vgl.
[-h --help]              Display this help message]

Notes on resolution parameter
----------------------------------
Resolution MUST be of format

a) W0xH0+X0+Y0[,W1xH1+X1+Y1,...,WnxHn+Xn+Yn]
  Set multi-screen  geometry  of  the virtual X display.
  Wi and Hi are the width and height of Screen i, and Xi and Yi.
  specify the offset of Screen i relative to the origin.
  The total width and height are determined by the bounding box of all screens.
b) widthxheight
  Set width and height of the virtual X display.

Author : Prasad Tengse <prasad.tengse@venus.uni-freiburg.de>
VCS    : https://github.com/imtek-emp/hpc-dotfiles.git
EOF
}

function main()
{

  run_mode="run"
  WM_RESOLUTION="1920x1080"


  while [ "${1}" != "" ]; do
    case ${1} in
      -r | --resolution )       shift;WM_RESOLUTION="${1}";
                                ;;
      -g | --enable-vgl)        enable_vgl="true";
                                ;;
      -a | --disable-autokill)  disable_autokill="true";
                                ;;
      -i | --info)              run_mode="info";
                                ;;
      -k | --kill)              run_mode="kill";
                                ;;
      -m | --skip-load)         load_required_modeule="false";
                                ;;
      # Debugging options
      --stderr)                 LOG_TO_STDERR="true";;
      -v | --verbose)           LOG_LVL="1";
                                log_info "Enable verbose logging";;
      -h | --help )             display_usage;exit 0;;
      * )                       log_error "Invalid argument(s). See usage below.";
                                usage; exit 1;;
    esac
    shift
  done

  if [[ -z $WM_RESOLUTION ]]; then
    log_error "WM_RESOLUTION is undefined!"
    exit 1
  else
    log_debug "Setting geometry params to $WM_RESOLUTION"
  fi

  # Run
  case "${run_mode}" in
    run)        run_vnc;;
    kill)       vnc_kill;;
    info)       display_info;exit $?;;
    *)          log_error "Internal Error! Invalid mode!";exit 1;;
  esac


}

main "$@"
