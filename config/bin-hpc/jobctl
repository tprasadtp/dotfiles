#!/usr/bin/env bash
# Copyright (c) 2021. Prasad Tengse
#
# shellcheck disable=SC2155,SC2034

set -o pipefail

# Script Constants
readonly CURDIR="$(cd -P -- "$(dirname -- "")" && pwd -P)"
readonly SCRIPT="$(basename "$0")"
# Default log level (debug logs are disabled)
LOG_LVL=0

# Handle Signals
# trap ctrl-c and SIGTERM
trap ctrl_c_signal_handler INT
trap term_signal_handler SIGTERM

function ctrl_c_signal_handler() {
  log_error "User Interrupt! CTRL-C"
  exit 4
}
function term_signal_handler() {
  log_error "Signal Interrupt! SIGTERM"
  exit 4
}


# Logging Handlers

# Define colors for logging
function define_colors()
{
  declare -gr YELLOW=$'\e[38;5;214m'
  declare -gr GREEN=$'\e[38;5;83m'
  declare -gr RED=$'\e[38;5;197m'
  declare -gr NC=$'\e[0m'

  # Enhanced colors
  declare -gr PINK=$'\e[38;5;212m'
  declare -gr BLUE=$'\e[38;5;81m'
  declare -gr ORANGE=$'\e[38;5;208m'
  declare -gr TEAL=$'\e[38;5;192m'
  declare -gr VIOLET=$'\e[38;5;219m'
  declare -gr GRAY=$'\e[38;5;250m'
  declare -gr DARK_GRAY=$'\e[38;5;246m'

  # Flag
  declare -gr COLORIZED=1
}

function undefine_colors()
{
  # Disable all colors
  declare -gr YELLOW=""
  declare -gr GREEN=""
  declare -gr RED=""
  declare -gr NC=""

  # Enhanced colors
  declare -gr PINK=""
  declare -gr BLUE=""
  declare -gr ORANGE=""
  declare -gr TEAL=""
  declare -gr VIOLET=""
  declare -gr GRAY=""
  declare -gr DARK_GRAY=""

  # Flag
  declare -gr COLORIZED=1
}

# Check for Colored output
if [[ -n ${CLICOLOR_FORCE} ]] && [[ ${CLICOLOR_FORCE} != "0" ]]; then
  # In CI/CD Forces colors
  define_colors
elif [[ -t 1 ]] && [[ -z ${NO_COLOR} ]] && [[ ${TERM} != "dumb" ]] ; then
  # Enables colors if Terminal is interactive and NOCOLOR is not empty
  define_colors
else
  # Disables colors
  undefine_colors
fi

## Check if logs should be written to stderr
## This is useful if script generates an output which can be piped or redirected
if [[ -z ${LOG_TO_STDERR} ]]; then
  LOG_TO_STDERR="false"
fi

# Log functions
function log_info()
{
  if [[ $LOG_TO_STDERR == "true" ]]; then
    printf "• %s \n" "$@" 1>&2
  else
    printf "• %s \n" "$@"
  fi
}

function log_success()
{
  if [[ $LOG_TO_STDERR == "true" ]]; then
    printf "%s• %s %s\n" "${GREEN}" "$@" "${NC}" 1>&2
  else
    printf "%s• %s %s\n" "${GREEN}" "$@" "${NC}"
  fi
}

function log_warning()
{
  if [[ $LOG_TO_STDERR == "true" ]]; then
    printf "%s• %s %s\n" "${YELLOW}" "$@" "${NC}" 1>&2
  else
    printf "%s• %s %s\n" "${YELLOW}" "$@" "${NC}"
  fi
}

function log_error()
{
  if [[ $LOG_TO_STDERR == "true" ]]; then
    printf "%s• %s %s\n" "${RED}" "$@" "${NC}" 1>&2
  else
    printf "%s• %s %s\n" "${RED}" "$@" "${NC}"
  fi
}

function log_debug()
{
  if [[ LOG_LVL -gt 0  ]]; then
    if [[ $LOG_TO_STDERR == "true" ]]; then
      printf "%s• %s %s\n" "${GRAY}" "$@" "${NC}" 1>&2
    else
      printf "%s• %s %s\n" "${GRAY}" "$@" "${NC}"
    fi
  fi
}

function log_notice()
{
  if [[ $LOG_TO_STDERR == "true" ]]; then
    printf "%s• %s %s\n" "${TEAL}" "$@" "${NC}" 1>&2
  else
    printf "%s• %s %s\n" "${TEAL}" "$@" "${NC}"
  fi
}

function log_variable()
{
  local var
  var="$1"
  if [[ ${LOG_LVL} -gt 0  ]]; then
    if [[ $LOG_TO_STDERR == "true" ]]; then
      printf "%s» %-20s - %-10s %s\n" "${GRAY}" "${var}" "${!var}" "${NC}" 1>&2
    else
      printf "%s» %-20s - %-10s %s\n" "${GRAY}" "${var}" "${!var}" "${NC}"
    fi
  fi
}

# Checks if command is available
function has_command() {
  if command -v "$1" >/dev/null; then
    return 0
  else
    return 1
  fi
  return 1
}


function show_jobstatus()
{
  if ! has_command checkjob; then
    log_error "checkjob command not found! ARe you running on HPC nodes?"
    exit 1
  fi

  local args=()
  if [[ $JOBCTL_NOCACHE == "true" ]]; then
    log_warning "Skipping local cache"
    args+=("--blocking")
  fi

  if [[ -z $JOBCTL_ID ]]; then
    log_debug "Getting info about current job"
    JOBCTL_ID="${MOAB_JOBID}"
  fi

  checkjob "${args[@]}" "${JOBCTL_ID}"
}


function display_usage()
{
#Prints out help menu
cat <<EOF
Bash script to

Usage: ${TEAL}${SCRIPT} ${BLUE} [options] ${NC}
${VIOLET}
------------------------- commands ------------------------------${NC}

${ORANGE}
---------------- Options with Required Argments-----------------${NC}
[--id]                  MOAB Job ID (Dfaults to env:MOAB_JOBID)
${GRAY}
--------------------- Debugging & Help -------------------------${NC}
[-d | --debug]          Enable debug loggging
[--stderr]              Log to stderr instead of stdout
[-h | --help]           Display this help message${NC}
${TEAL}
------------------- Environment Variables ----------------------${NC}
${BLUE}LOG_TO_STDERR${NC}     - Set this to 'true' to log to stderr.
${BLUE}NO_COLOR${NC}          - Set this to NON-EMPTY to disable all colors.
${BLUE}CLICOLOR_FORCE${NC}    - Set this to NON-ZERO to force colored output.
                    Other color related conditions are ignored.
                  - Colors are disabled if output is not a TTY
EOF
}


function main()
{
  while [[ ${1} != "" ]]; do
    case ${1} in
        status)                 JOBCTL_TASK="status";;
        --id)                   shift;JOBCTL_ID="${1}";;
        -c | --no-cache)        JOBCTL_NOCACHE="true";;
        # Debugging options
        --stderr)               LOG_TO_STDERR="true";;
        -d | --debug)           LOG_LVL="1";
                                log_info "Enable verbose logging";;
        -h | --help )           display_usage;exit 0;;
        * )                     log_error "Invalid argument(s). See usage below.";
                                display_usage;
                                exit 1;
    esac
    shift
  done

  if [[ -z ${JOBCTL_TASK} ]]; then
    log_error "No command specified!"
    exit 1
  fi

  case ${JOBCTL_TASK} in
    status)   show_jobstatus;;
    *)        log_error "Internal error! Unknown JOBCTL_TASK!"; exit 1;;
  esac
}

main "$@"
