{
  "Bash-Logger": {
    "prefix": "sh-logger",
    "body": [
      "### BEGIN LOGGING SNIPPET ###",
      "# shellcheck disable=SC3043",
      "",
      "# SHELL LOGGING LIBRARY",
      "# See https://github.com/tprasadtp/dotfiles/libs/logger/README.md",
      "# If included in other files, contents between snippet markers is",
      "# automatically updated and all changes between markers wil be ignored.",
      "",
      "# Logger core",
      "__logger_core_event_handler()",
      "{",
      "  [ \"\\$#\" -lt 2 ] && return",
      "",
      "  # Caller is same as level name",
      "  local lvl_caller=\"\\${1:-info}\"",
      "",
      "  case \\$lvl_caller in",
      "    log_trace | trace)",
      "      lvl_caller=\"trace\"",
      "      level=\"0\"",
      "      ;;",
      "    log_debug | debug)",
      "      lvl_caller=\"debug\"",
      "      level=\"10\"",
      "      ;;",
      "    log_info | info)",
      "      lvl_caller=\"info\"",
      "      level=\"20\"",
      "      ;;",
      "    log_success | success | ok)",
      "      lvl_caller=\"success\"",
      "      level=\"20\"",
      "      ;;",
      "    log_warning | warning | warn)",
      "      lvl_caller=\"warning\"",
      "      level=\"30\"",
      "      ;;",
      "    log_notice | notice)",
      "      lvl_caller=\"notice\"",
      "      level=\"35\"",
      "      ;;",
      "    log_error | error)",
      "      lvl_caller=\"error\"",
      "      level=\"40\"",
      "      ;;",
      "    *)",
      "      level=\"40\"",
      "      ;;",
      "  esac",
      "",
      "  # Immediately return if log level is not enabled",
      "  # If LOG_LVL is not set, defaults to 20 - info level",
      "  [ \"\\${LOG_LVL:-20}\" -gt \"\\$level\" ] && return",
      "",
      "  shift",
      "  local lvl_msg=\"\\$*\"",
      "",
      "  # Detect whether to coloring is disabled based on env variables,",
      "  # and if output Terminal is intractive. This supports both",
      "  # - https://bixense.com/clicolors/ &",
      "  # - https://no-color.org/ standards.",
      "",
      "  # Forces colored logs",
      "  # - if CLICOLOR_FORCE is set and non empty and not zero",
      "  #",
      "  if [ -n \"\\${CLICOLOR_FORCE}\" ] && [ \"\\${CLICOLOR_FORCE}\" != \"0\" ]; then",
      "    local lvl_colorized=\"true\"",
      "    # shellcheck disable=SC2155",
      "    local lvl_color_reset=\"\\$(printf '\\e[0m')\"",
      "",
      "  # Disable colors if one of the conditions are true",
      "  # - CLICOLOR = 0",
      "  # - NO_COLOR is set to non empty value",
      "  # - TERM is set to dumb",
      "  elif [ -n \"\\$NO_COLOR\" ] || [ \"\\$CLICOLOR\" = \"0\" ] || [ \"\\$TERM\" = \"dumb\" ]; then",
      "    local lvl_colorized=\"false\"",
      "    local lvl_color=\"\"",
      "    local lvl_color_reset=\"\"",
      "",
      "  # Enable colors if not already disabled or forced and terminal is interactive",
      "  elif [ -t 1 ]; then",
      "    local lvl_colorized=\"true\"",
      "    # shellcheck disable=SC2155",
      "    local lvl_color_reset=\"\\$(printf '\\e[0m')\"",
      "",
      "  # Default=disable colors",
      "  else",
      "    local lvl_colorized=\"false\"",
      "    local lvl_color=\"\"",
      "    local lvl_color_reset=\"\"",
      "  fi",
      "",
      "  # Log and Date formatter",
      "  if [ \"\\${LOG_FMT:-pretty}\" = \"pretty\" ] && [ \"\\$lvl_colorized\" = \"true\" ]; then",
      "    local lvl_string=\"â€¢\"",
      "  elif [ \"\\${LOG_FMT}\" = \"full\" ] || [ \"\\${LOG_FMT}\" = \"long\" ]; then",
      "    local lvl_prefix=\"name+ts\"",
      "    # shellcheck disable=SC2155",
      "    local lvl_ts=\"\\$(date --rfc-3339=s)\"",
      "  else",
      "    local lvl_prefix=\"name\"",
      "  fi",
      "",
      "  # Define level, color and timestamp",
      "  # By default we do not show log level and timestamp.",
      "  # However, if LOG_FMT is set to \"full\" or \"long\" or if colors are disabled,",
      "  # we will enable long format with timestamps",
      "  case \"\\$lvl_caller\" in",
      "    trace)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[TRACE ]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [TRACE ]\"",
      "      # shellcheck disable=SC2155",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && local lvl_color=\"\\$(printf '\\e[38;5;246m')\"",
      "      ;;",
      "    debug)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[DEBUG ]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [DEBUG ]\"",
      "      # shellcheck disable=SC2155",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && local lvl_color=\"\\$(printf '\\e[38;5;250m')\"",
      "      ;;",
      "    info)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[INFO  ]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [INFO  ]\"",
      "      # Avoid printing color reset sequence as this level is not colored",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && lvl_color_reset=\"\"",
      "      ;;",
      "    success)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[OK    ]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [OK    ]\"",
      "      # shellcheck disable=SC2155",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && local lvl_color=\"\\$(printf '\\e[38;5;83m')\"",
      "      ;;",
      "    warning)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[WARN  ]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [WARN  ]\"",
      "      # shellcheck disable=SC2155",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && local lvl_color=\"\\$(printf '\\e[38;5;214m')\"",
      "      ;;",
      "    notice)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[NOTICE]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [NOTICE]\"",
      "      # shellcheck disable=SC2155",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && local lvl_color=\"\\$(printf '\\e[38;5;81m')\"",
      "      ;;",
      "    error)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[ERROR ]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [ERROR ]\"",
      "      # shellcheck disable=SC2155",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && local lvl_color=\"\\$(printf '\\e[38;5;197m')\"",
      "      ;;",
      "    *)",
      "      [ \"\\$lvl_prefix\" = \"name\" ] && local lvl_string=\"[UNKOWN]\"",
      "      [ \"\\$lvl_prefix\" = \"name+ts\" ] && local lvl_string=\"\\$lvl_ts [UNKNOWN]\"",
      "      # Avoid printing color reset sequence as this level is not colored",
      "      [ \"\\$lvl_colorized\" = \"true\" ] && lvl_color_reset=\"\"",
      "      ;;",
      "  esac",
      "",
      "  if [ \"\\${LOG_TO_STDERR:-false}\" = \"true\" ]; then",
      "    printf \"%s%s %s %s\\n\" \"\\$lvl_color\" \"\\${lvl_string}\" \"\\$lvl_msg\" \"\\${lvl_color_reset}\" 1>&2",
      "  else",
      "    printf \"%s%s %s %s\\n\" \"\\$lvl_color\" \"\\${lvl_string}\" \"\\$lvl_msg\" \"\\${lvl_color_reset}\"",
      "  fi",
      "}",
      "",
      "# Leveled Loggers",
      "log_trace()",
      "{",
      "  __logger_core_event_handler \"trace\" \"\\$@\"",
      "}",
      "",
      "log_debug()",
      "{",
      "  __logger_core_event_handler \"debug\" \"\\$@\"",
      "}",
      "",
      "log_info()",
      "{",
      "  __logger_core_event_handler \"info\" \"\\$@\"",
      "}",
      "",
      "log_success()",
      "{",
      "  __logger_core_event_handler \"ok\" \"\\$@\"",
      "}",
      "",
      "log_warning()",
      "{",
      "  __logger_core_event_handler \"warn\" \"\\$@\"",
      "}",
      "",
      "log_warn()",
      "{",
      "  __logger_core_event_handler \"warn\" \"\\$@\"",
      "}",
      "",
      "log_notice()",
      "{",
      "  __logger_core_event_handler \"notice\" \"\\$@\"",
      "}",
      "",
      "log_error()",
      "{",
      "  __logger_core_event_handler \"error\" \"\\$@\"",
      "}",
      "",
      "### END LOGGING SNIPPET ###",
      ""
    ],
    "description": "Shellscript-Logger"
  },
  "Check if command is available": {
    "prefix": "sh-has-command",
    "body": [
      "# Checks if command is available",
      "function has_command() {",
      "\tif command -v \"\\$1\" >/dev/null; then",
      "\t\treturn 0",
      "\telse",
      "\t\treturn 1",
      "\tfi",
      "\treturn 1",
      "}",
      ""
    ],
    "description": "Check if command is available on the system"
  },
  "Check-Errored-Items": {
    "prefix": "sh-check-errored-items",
    "body": [
      "\tif [[ \\${#ERRORS[@]} -eq 0 ]]; then",
      "\t\tlog_success \"Success\"",
      "\telse",
      "\t\tlog_error \"Failed for : \\${ERRORS[*]}\"",
      "\t\texit 1",
      "\tfi",
      ""
    ],
    "description": "Checks if array ERRORS has more than one element",
    "scope": "shellscript"
  },
  "Semver RegEx Define": {
    "prefix": "sh-const-semver",
    "body": [
      "readonly SEMVER_REGEX=\"^[vV]?(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-(0|[1-9][0-9]*|[0-9]*[A-Za-z-][0-9A-Za-z-]*)(\\.(0|[1-9][0-9]*|[0-9]*[A-Za-z-][0-9A-Za-z-]*))*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?\\$\"",
      ""
    ],
    "description": "Semver RegEx"
  },
  "Semver RegEx Extract All": {
    "prefix": "sh-semver-extract",
    "body": [
      "\tmajor=\"\\${BASH_REMATCH[1]}\"",
      "\tminor=\"\\${BASH_REMATCH[2]}\"",
      "\tpatch=\"\\${BASH_REMATCH[3]}\"",
      "\tpre=\"\\${BASH_REMATCH[4]:1}\"",
      "\tbuild=\"\\${BASH_REMATCH[8]:1}\""
    ],
    "description": "Semver RegEx Extract Versions"
  },
  "Semver RegEx Extract Major": {
    "prefix": "sh-semver-major",
    "body": [
      "\"\\${BASH_REMATCH[1]}\""
    ],
    "description": "Semver RegEx Extract Major"
  },
  "Semver RegEx Extract Minor": {
    "prefix": "sh-semver-minor",
    "body": [
      "\"\\${BASH_REMATCH[2]}\""
    ],
    "description": "Semver RegEx Extract Versions"
  },
  "Semver RegEx Extract Patch": {
    "prefix": "sh-semver-patch",
    "body": [
      "\"\\${BASH_REMATCH[3]}\""
    ],
    "description": "Semver RegEx Extract Versions"
  },
  "Help-Function-Snippet": {
    "prefix": "sh-help-snippet",
    "body": [
      "function display_usage()",
      "{",
      "#Prints out help menu",
      "cat <<EOF",
      "Bash script to",
      "",
      "Usage: \\${TEAL}\\${SCRIPT} \\${BLUE} [options] \\${NC}",
      "\\${VIOLET}",
      "------------------------- Options ------------------------------\\${NC}",
      "",
      "\\${ORANGE}",
      "---------------- Options with Required Argments-----------------\\${NC}",
      "",
      "\\${GRAY}",
      "--------------------- Debugging & Help -------------------------\\${NC}",
      "[-d | --debug]          Enable debug loggging",
      "[--stderr]              Log to stderr instead of stdout",
      "[-h | --help]           Display this help message\\${NC}",
      "\\${TEAL}",
      "------------------- Environment Variables ----------------------\\${NC}",
      "\\${BLUE}LOG_TO_STDERR\\${NC}     - Set this to 'true' to log to stderr.",
      "\\${BLUE}NO_COLOR\\${NC}          - Set this to NON-EMPTY to disable all colors.",
      "\\${BLUE}CLICOLOR_FORCE\\${NC}    - Set this to NON-ZERO to force colored output.",
      "                    Other color related conditions are ignored.",
      "                  - Colors are disabled if output is not a TTY",
      "EOF",
      "}"
    ],
    "description": "Help-Function-Snippet",
    "scope": "shellscript"
  },
  "Shellscript-Header": {
    "prefix": [
      "sh-header"
    ],
    "body": [
      "#!/usr/bin/env bash",
      "# Copyright (c) $CURRENT_YEAR. Prasad Tengse",
      "#",
      "# shellcheck disable=SC2155,SC2034",
      "",
      "set -o pipefail",
      "",
      "# Script Constants",
      "readonly CURDIR=\"\\$(cd -P -- \"\\$(dirname -- \"\")\" && pwd -P)\"",
      "readonly SCRIPT=\"\\$(basename \"\\$0\")\""
    ],
    "description": "Shellscript shbang",
    "scope": "shellscript"
  },
  "No-Args-Check": {
    "prefix": "sh-no-args-check",
    "body": [
      "  if [[ \\$# -eq 0 ]]; then",
      "\tlog_error \"No Arguments specified!\"",
      "\tdisplay_usage;",
      "\texit 1",
      "  fi"
    ],
    "description": "Checks if no arguments are specified. If true, error and exit after displaying help message",
    "scope": "shellscript"
  },
  "Main-Function": {
    "prefix": "sh-main",
    "body": [
      "function main()",
      "{",
      "",
      "}"
    ],
    "description": "Main entrypoint",
    "scope": "shellscript"
  },
  "Main-Entrypoint": {
    "prefix": "sh-entrypoint",
    "body": [
      "main \"\\$@\"",
      ""
    ],
    "description": "Main entrypoint",
    "scope": "shellscript"
  },
  "Parse Options": {
    "prefix": "sh-parse-options",
    "body": [
      "",
      "function parse_options()",
      "{",
      "\tNON_OPTION_ARGS=()",
      "\twhile [[ \\${1} != \"\" ]]; do",
      "\tcase \\${1} in",
      "\t\t--stderr)               LOG_TO_STDERR=\"true\";;",
      "\t\t-d | --debug)           LOG_LVL=\"1\";",
      "\t                          log_debug \"Enabled verbose logging\";;",
      "\t\t-h | --help )           display_usage;exit 0;;",
      "\t\t*)                      NON_OPTION_ARGS+=(\"\\${1}\");;",
      "\tesac",
      "\tshift",
      "  done",
      "}",
      ""
    ],
    "description": "Parse-Arguments and Flags"
  },
  "Parse Args": {
    "prefix": "sh-pare-args",
    "body": [
      "\tif [[ \\$# -lt 1 ]]; then",
      "\t\tlog_error \"No arguments specified\"",
      "\t\tdisplay_usage",
      "\t\texit 1",
      "\tfi",
      "",
      "\twhile [[ \\${1} != \"\" ]]; do",
      "\t\tcase \\${1} in",
      "\t\t    # Debugging options",
      "\t\t    --stderr)               LOG_TO_STDERR=\"true\";;",
      "\t\t    -d | --debug)           LOG_LVL=\"1\";",
      "\t\t                            log_info \"Enable verbose logging\";;",
      "\t\t    -h | --help )           display_usage;exit 0;;",
      "\t\t    * )                     log_error \"Invalid argument(s). See usage below.\";",
      "\t\t                            display_usage;",
      "\t\t                            exit 1;",
      "\t\tesac",
      "\t\tshift",
      "\tdone"
    ],
    "description": "Parse Args"
  },
  "Compare-Semver-Strings": {
    "prefix": "sh-semver-compare",
    "body": [
      "function compare_versions()",
      "{",
      "\t# Function to compare two semver version strings.",
      "\t#",
      "\t# REQUIRED ARGUMENTS:",
      "\t# Accepts two arguments both of which are semver version strings.",
      "\t#",
      "\t# ARG1 - CURRENT_SEMVER. Usually obtained from",
      "\t#     a) Within the script",
      "\t#     b) Executing {binary} --version --short",
      "\t#     c) Version marker files from ~/bin or /usr/share/vmark-files/{binary}",
      "\t#     d) Package manager's metadata",
      "\t# ARG2 - UPSTREAM_SEMVER. Usually obtained from",
      "\t#     a) Upcheck API endpoint",
      "\t#     b) GitHub releases API",
      "\t# This function will NOT handle fetching/reading these values.",
      "\t#",
      "\t# DEPENDENCIES: One of the following is required.",
      "\t#     a) 'sh-logger' snippet from tprasadtp/templates repository.",
      "\t#     b) 'log_debug' function. Minimum dummy implementation is below.",
      "\t#        ```bash",
      "\t#        function log_debug(){}",
      "\t#        ```",
      "\t# LOGGING: All logs generated by this function are at debug level (handled by `log_debug`).",
      "",
      "\t# Compares CURRENT_SEMVER and UPSTREAM_SEMVER mostly according to semver specs and sets a",
      "\t# global variable VCOMPARE_RESULT to save the result.",
      "\t# RESULTS:",
      "\t# If CURRENT_SEMVER > UPSTREAM_SEMVER  VCOMPARE_RESULT is -1. (no update required)",
      "\t# If CURRENT_SEMVER < UPSTREAM_SEMVER  VCOMPARE_RESULT is  1. (update is required)",
      "\t# If CURRENT_SEMVER == UPSTREAM_SEMVER VCOMPARE_RESULT is  0. (no update required)",
      "\t# ERRORS:",
      "\t#   a) ERROR_INVALID_SEMVER_1    - CURRENT_SEMVER  is invalid",
      "\t#   b) ERROR_INVALID_SEMVER_2    - UPSTREAM_SEMVER is invalid",
      "\t#   c) ERROR_DEPENDENCY          - 'log_debug' function is not defined",
      "\t#   d) ERROR_INCOMPLETE_EVAL     - For some reason, evaluation isn't completed",
      "\t#   e) ERROR_UNHANDLED_CONDITION - Unhadled condition.",
      "\t#",
      "\t# NOTES:",
      "\t# Please note that ERROR_INVALID_SEMVER indicates version is not compliant accoring",
      "\t# to our versioning policy. It might be a valid semver according to semver specs,",
      "\t# but is non compliant with our tagging policy, which follows",
      "\t# MAJOR.MINOR.PATCH-<PRERELEASE_IDENTIFIER>.<PRERELEASE_VERSION>",
      "\t# For pre releases, PRERELEASE_IDENTIFIER can be 'alpha', 'beta' or 'rc' with an",
      "\t# optional <PRERELEASE_VERSION> which MUST be a non negative integer.",
      "",
      "\t# Default error in case of incomplete evaluation for any other reason",
      "\tdeclare -g VCOMPARE_RESULT=\"ERROR_INCOMPLETE_EVAL\"",
      "",
      "\t# Check if log_debug function is defined",
      "\tif ! declare -F \"log_debug\" > /dev/null; then",
      "\t\tVCOMPARE_RESULT=\"ERROR_DEPENDENCY\"",
      "\t\treturn",
      "\tfi",
      "",
      "\t# Define semver regex according to policy tprasadtp/templates/semver-regex.md",
      "\tdeclare -r SEMVER_REGEX=\"^[vV]?(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-(alpha|beta|rc)(\\.(0|[1-9][0-9]*))?)?\\\\$\"",
      "",
      "\tlocal current_semver upstream_semver",
      "\tcurrent_semver=\"\\$1\"",
      "\tupstream_semver=\"\\$2\"",
      "",
      "\tlog_debug \"Current  version : \\${current_semver}\"",
      "\tlog_debug \"Upstream version : \\${upstream_semver}\"",
      "",
      "\tlocal current_major current_minor current_patch current_pre current_pre_num",
      "\tlocal upstream_major upstream_minor upstream_patch upstream_pre upstream_pre_num",
      "",
      "\t# Parse current semver",
      "\tif [[ \\$current_semver =~ \\$SEMVER_REGEX ]]; then",
      "\t  current_major=\"\\${BASH_REMATCH[1]}\"",
      "\t  current_minor=\"\\${BASH_REMATCH[2]}\"",
      "\t  current_patch=\"\\${BASH_REMATCH[3]}\"",
      "\t  current_pre=\"\\${BASH_REMATCH[5]}\"",
      "\t  current_pre_num=\"\\${BASH_REMATCH[7]}\"",
      "\t  log_debug \"Parsed version (current)  -> major:\\${current_major} minor:\\${current_minor} patch:\\${current_patch} pre:\\${current_pre} prenum:\\${current_pre_num}\"",
      "\telse",
      "\t  VCOMPARE_RESULT=\"ERROR_INVALID_SEMVER_1\"",
      "\t  return",
      "\tfi",
      "",
      "\t# Parse upstream semver.",
      "\tif [[ \\${upstream_semver} =~ \\$SEMVER_REGEX ]]; then",
      "\t  upstream_major=\"\\${BASH_REMATCH[1]}\"",
      "\t  upstream_minor=\"\\${BASH_REMATCH[2]}\"",
      "\t  upstream_patch=\"\\${BASH_REMATCH[3]}\"",
      "\t  upstream_pre=\"\\${BASH_REMATCH[5]}\"",
      "\t  upstream_pre_num=\"\\${BASH_REMATCH[7]}\"",
      "\t  log_debug \"Parsed version (upstream) -> major:\\${upstream_major} minor:\\${upstream_minor} patch:\\${upstream_patch} pre:\\${upstream_pre} prenum:\\${upstream_pre_num}\"",
      "\telse",
      "\t  VCOMPARE_RESULT=\"ERROR_INVALID_SEMVER_2\"",
      "\t  return",
      "\tfi",
      "",
      "\t# Compare semver versions",
      "\t# Major version",
      "\tif [[ \\${upstream_major} -gt \\${current_major} ]]; then",
      "\t  log_debug \"Upstream release is newer than current \\${upstream_major} > \\${current_major} (major)\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\telif [[ \\${upstream_major} -lt \\${current_major} ]]; then",
      "\t  log_debug \"Current version is newer than upstream available \\${upstream_major} < \\${current_major} (major)\"",
      "\t  VCOMPARE_RESULT=\"-1\"",
      "\t  return",
      "\tfi",
      "",
      "\t# Minor version",
      "\t# This will only be executed if MAJOR versions match.",
      "\tif [[ \\${upstream_minor} -gt \\${current_minor} ]]; then",
      "\t  log_debug \"Upstream release is newer than current \\${upstream_minor} > \\${current_minor} (minor)\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\telif [[ \\${upstream_minor} -lt \\${current_minor} ]]; then",
      "\t  log_debug \"Current version is newer than upstream available \\${upstream_minor} < \\${current_minor} (minor)\"",
      "\t  VCOMPARE_RESULT=\"-1\"",
      "\t  return",
      "\tfi",
      "",
      "\t# Patch version",
      "\t# This will only be executed if MAJOR AND MINOR versions match.",
      "\tif [[ \\${upstream_patch} -gt \\${current_patch} ]]; then",
      "\t  log_debug \"Upstream release is newer than current \\${upstream_patch} > \\${current_patch} (patch)\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\telif [[ \\${upstream_patch} -lt \\${current_patch} ]]; then",
      "\t  log_debug \"Current version is newer than upstream available \\${upstream_patch} < \\${current_patch} (patch)\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\tfi",
      "",
      "\t# What follows below is the mess of somewhat following semver specs.",
      "\tlog_debug \"Major, Minor and Patch version match.\"",
      "",
      "\t# Check if pre release strings are present in one of the versions. whichever lacks pre release string",
      "\t# is the upstream one. For Eg. 2.3.6-beta.1 < 2.3.6",
      "",
      "\t# upstream version has NO pre release fields but current one DOES",
      "\t# current: 2.2.2-rc.1 upstream: 2.2.2, then upstream is newer.",
      "\tif [[ -z \\${upstream_pre} ]] && [[ -n \\$current_pre ]]; then",
      "\t  log_debug \"Upstream version has no pre release fields, it is newer!\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\t# upstream version HAS prerelease fields but current one DOES NOT",
      "\t# current: 2.2.2 upstream: 2.2.2-rc.1, then current is newer.",
      "\telif [[ -n \\${upstream_pre} ]] && [[ -z \\$current_pre ]]; then",
      "\t  log_debug \"Current version has no pre release fields, it is newer!\"",
      "\t  VCOMPARE_RESULT=\"-1\"",
      "\t  return",
      "\tfi",
      "",
      "\t# We do not follow complete semver specs.",
      "\t# This is done for simplicity. All our versioning policies only include",
      "\t# pre release tags of format MAJOR.MINOR.PATCH-<PRERELEASE_IDENTIFIER>.<PRERELEASE_VERSION>",
      "\t# In our policies its strictly forbidden to include build numbers and build identifiers in",
      "\t# the tags created. We only embed build number information in",
      "\t# execultables themeselves or as packaging metadata like docker labels.",
      "\t# In case of pre release versions, we only have <PRERELEASE_IDENTIFIER>.<PRERELEASE_VERSION>",
      "\t# or <PRERELEASE_IDENTIFIER>. Thus, all other cases are ignored.",
      "",
      "\t# Check if pre release identifiers match.",
      "\t# Spec 11.4.2",
      "\t# Identifiers with letters or hyphens are compared lexically in ASCII sort order.",
      "\tif [[ \\$upstream_pre > \\$current_pre ]]; then",
      "\t  log_debug \"Upstream pre release identider is lexographically greater than current one.(prerelease)\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\telif [[ \\$upstream_pre < \\$current_pre ]]; then",
      "\t  log_debug \"Current pre release identider is lexographically greater than upstream one.(prerelease)\"",
      "\t  VCOMPARE_RESULT=\"-1\"",
      "\t  return",
      "\telse",
      "\t  log_debug \"Current and upstream pre release identifiers match\"",
      "\tfi",
      "",
      "\t# Spec 11.4.4: A larger set of pre-release fields has a higher precedence than a smaller set,",
      "\t#              if all of the preceding identifiers are equal.",
      "\t# check if both PRERELEASE_VERSION fields are empty, if so both versions are equal.",
      "\tif  [[ -z \\$upstream_pre_num ]] && [[ -z \\$current_pre_num ]]; then",
      "\t  log_debug \"pre-release version identifiers are empty for both fields. (all)\"",
      "\t  VCOMPARE_RESULT=\"0\"",
      "\t  return",
      "\tfi",
      "",
      "\t# upstream version has pre release version field but current one doesnt",
      "\t# current: 2.2.2-rc upstream: 2.2.2.rc.1, then upstream is newer.",
      "\tif [[ -z \\${upstream_pre_num} ]] && [[ -n \\$current_pre_num ]]; then",
      "\t  log_debug \"Upstream has pre release number but current one does not. Upstream is newer (prerelease-num)\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\t# upstream version has lacks pre release version field but current one does",
      "\t# current: 2.2.2-rc.1 upstream: 2.2.2.rc, then current is newer.",
      "\telif [[ -n \\${upstream_pre_num} ]] && [[ -z \\$upstream_pre_num ]]; then",
      "\t  log_debug \"Current version pre release number but current one does not. Current version is newer. (prerelease-num)\"",
      "\t  VCOMPARE_RESULT=\"-1\"",
      "\t  return",
      "\tfi",
      "",
      "\tif [[ \\${upstream_pre_num} -gt \\${current_pre_num} ]]; then",
      "\t  log_debug \"Upstream release is newer than current \\${upstream_pre_num} > \\${current_pre_num} (prerelease-num)\"",
      "\t  VCOMPARE_RESULT=\"1\"",
      "\t  return",
      "\telif [[ \\${upstream_pre_num} -lt \\${current_pre_num} ]]; then",
      "\t  log_debug \"Current version is newer than upstream available \\${upstream_pre_num} < \\${current_pre_num} (prerelease-num)\"",
      "\t  VCOMPARE_RESULT=\"-1\"",
      "\t  return",
      "\telif [[ \\${upstream_pre_num} -eq \\${current_pre_num} ]]; then",
      "\t  log_debug \"Current and upstream pre release nums match. \\${upstream_pre_num} = \\${current_pre_num} (all)\"",
      "\t  VCOMPARE_RESULT=\"0\"",
      "\t  return",
      "\tfi",
      "",
      "\t# We should never reach this condition. If we do, indicate we did not handle all conditions.",
      "\t# This should trigger a bug report prompt/message in logs.",
      "\tVCOMPARE_RESULT=\"ERROR_UNHANDLED_CONDITION\"",
      "}"
    ],
    "description": "Compare-Semver-Strings"
  }
}
