{
  "Shellscript-Log-Base": {
    "prefix": [
      "sh-loggers",
      "sh-log-base"
    ],
    "body": [
      "## BEGIN AUTO-GENERATED CONTENT ##",
      "",
      "# Basic colors",
      "readonly YELLOW=\\$'\\e[38;5;221m'",
      "readonly GREEN=\\$'\\e[38;5;42m'",
      "readonly RED=\\$'\\e[38;5;197m'",
      "readonly NC=\\$'\\e[0m'",
      "",
      "# Enhanced colors",
      "",
      "readonly PINK=\\$'\\e[38;5;212m'",
      "readonly BLUE=\\$'\\e[38;5;159m'",
      "readonly ORANGE=\\$'\\e[38;5;208m'",
      "readonly TEAL=\\$'\\e[38;5;192m'",
      "readonly VIOLET=\\$'\\e[38;5;219m'",
      "readonly GRAY=\\$'\\e[38;5;246m'",
      "readonly DARK_GRAY=\\$'\\e[38;5;242m'",
      "",
      "# Script Defaults",
      "LOG_LVL=0",
      "",
      "# Default Log Handlers",
      "",
      "function log_info()",
      "{",
      "\tprintf \"• %s \\n\" \"$@\"",
      "}",
      "",
      "function log_success()",
      "{",
      "\tprintf \"%s• %s %s\\n\" \"\\${GREEN}\" \"$@\" \"\\${NC}\"",
      "}",
      "",
      "function log_warning()",
      "{",
      "\tprintf \"%s• %s %s\\n\" \"\\${YELLOW}\" \"$@\" \"\\${NC}\"",
      "}",
      "",
      "function log_error()",
      "{",
      "   printf \"%s• %s %s\\n\" \"\\${RED}\" \"$@\" \"\\${NC}\"",
      "}",
      "",
      "function log_debug()",
      "{",
      "\tif [[ \\$LOG_LVL -gt 0  ]]; then",
      "\t\tprintf \"%s• %s %s\\n\" \"\\${GRAY}\" \"$@\" \"\\${NC}\"",
      "\tfi",
      "}",
      "",
      "function log_notice()",
      "{",
      "\tprintf \"%s• %s %s\\n\" \"\\${TEAL}\" \"$@\" \"\\${NC}\"",
      "}",
      "",
      "function log_step_notice()",
      "{",
      "\tprintf \"%s  • %s %s\\n\" \"\\${TEAL}\" \"$@\" \"\\${NC}\"",
      "}",
      "",
      "function log_step_error()",
      "{",
      "\tprintf \"%s  • %s %s\\n\" \"\\${RED}\" \"$@\" \"\\${NC}\"",
      "}",
      "",
      "function log_step_success()",
      "{",
      "\tprintf \"%s  • %s %s\\n\" \"\\${GREEN}\" \"$@\" \"\\${NC}\"",
      "}",
      "",
      "function log_step_debug()",
      "{",
      "\tif [[ \\$LOG_LVL -gt 0  ]]; then",
      "\t\tprintf \"%s  • %s %s\\n\" \"\\${GRAY}\" \"$@\" \"\\${NC}\"",
      "\tfi",
      "}",
      "",
      "function log_step_info()",
      "{",
      "\tprintf \"  • %s\\n\" \"$@\" ",
      "}",
      "",
      "function log_variable()",
      "{",
      "\tlocal var",
      "\tvar=\"\\$1\"",
      "\tif [[ \\$LOG_LVL -gt 0  ]]; then",
      "\t\tprintf \"%s  » %-20s - %-10s %s\\n\" \"\\${GRAY}\" \"\\${var}\" \"\\${!var}\" \"\\${NC}\"",
      "\tfi",
      "}",
      "## END AUTO-GENERATED CONTENT ##",
      ""
    ],
    "description": "Basic shellscript logging base snippet",
    "scope": "shellscript"
  },
  "Check-Errored-Items": {
    "prefix": "check-errored-items",
    "body": [
      "\tif [[ \\${#ERRORS[@]} -eq 0 ]]; then",
      "\t\tlog_success \"Success\"",
      "\telse",
      "\t\tlog_error \"Failed for : \\${ERRORS[*]}\"",
      "\t\texit 1",
      "\tfi",
      ""
    ],
    "description": "Check-Errored-Items",
    "scope": "shellscript"
  },
  "Help-Function-Snippet": {
    "prefix": "help-snippet",
    "body": [
      "function display_usage()",
      "{",
      "#Prints out help menu",
      "cat <<EOF",
      "Bash script to",
      "",
      "Usage: \\${TEAL}\\${SCRIPT} \\${BLUE} [options] \\${NC}",
      "",
      "--------------- Arguments -------------------",
      "",
      "",
      "---------------- Options --------------------",
      "",
      "",
      "----------- Debugging & Help ----------------",
      "\\${GRAY}",
      "[-v | --verbose]        [Enable verbose loggging]",
      "[-h | --help]           [Display this help message]\\${NC}",
      "EOF",
      "}"
    ],
    "description": "Help-Function-Snippet",
    "scope": "shellscript"
  },
  "Shellscript-Header": {
    "prefix": [
      "header",
      "shelscript-header"
    ],
    "body": [
      "#!/usr/bin/env bash",
      "# Copyright (c) $CURRENT_YEAR. Prasad Tengse",
      "#",
      "",
      "set -o pipefail",
      "",
      "# Script Constants",
      "readonly CURDIR=\"\\$(cd -P -- \"\\$(dirname -- \"\")\" && pwd -P)\"",
      "readonly SCRIPT=\"\\$(basename \"\\$0\")\"",
      "",
      "# Handle Use interrupt",
      "# trap ctrl-c and call ctrl_c()",
      "trap ctrl_c_handler INT",
      "",
      "function ctrl_c_handler() {",
      "\tlog_error \"User Interrupt! CTRL-C\"",
      "\texit 4",
      "}"
    ],
    "description": "Shellscript shbang",
    "scope": "shellscript"
  },
  "No-Args-Check": {
    "prefix": "no-args-check",
    "body": [
      "  if [[ \\$# -eq 0 ]]; then",
      "    log_error \"No Arguments specified!\"",
      "    display_usage;",
      "    exit 1",
      "  fi"
    ],
    "description": "Checks if no arguments are specified. If true, error and exit after displaying help message",
    "scope": "shellscript"
  },
  "Main-Entrypoint": {
    "prefix": "main",
    "body": [
      "main \"$@\"",
      ""
    ],
    "description": "Main entrypoint",
    "scope": "shellscript"
  },
  "Parse-Arguments": {
    "prefix": "parse-args",
    "body": [
      "",
      "function parse_options()",
      "{",
      "  NON_OPTION_ARGS=()",
      "  while [[ \\${1} != \"\" ]]; do",
      "    case \\${1} in",
      "      -v | --verbose)         LOG_LVL=\"1\";",
      "                              log_debug \"Enabled verbose logging\";;",
      "      -h | --help )           display_usage;exit 0;;",
      "      *)                      NON_OPTION_ARGS+=(\"\\${1}\");;",
      "    esac",
      "    shift",
      "  done",
      "}",
      ""
    ],
    "description": "Parse-Arguments"
  }
}
